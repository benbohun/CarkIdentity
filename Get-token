Function Get-IdentityHeader {
    <#
    .SYNOPSIS
        Retrieves an authentication token for CyberArk Identity APIs (Privilege Cloud - ISPSS).
    .DESCRIPTION
        This function authenticates a user, handles authentication challenges, and returns an Identity Token.
        The token is printed to the console for visibility.
    #>
    [CmdletBinding(DefaultParameterSetName = 'IdentityUserName')]
    Param (
        # Username for authentication
        [Parameter(ParameterSetName = "IdentityUserName", Mandatory = $true)]
        [string]$IdentityUserName,

        # Username and Password credentials
        [Parameter(ParameterSetName = 'UPCreds', Mandatory = $true)]
        [pscredential]$UPCreds,

        # OAuth credentials (Client ID and Secret)
        [Parameter(ParameterSetName = 'OAuthCreds', Mandatory = $true)]
        [pscredential]$OAuthCreds,

        # Identity Tenant URL (found in Identity Admin Portal > Settings > Customization > Tenant URL)
        [Parameter(Mandatory = $true)]
        [string]$IdentityTenantURL,

        # Format output token for use with psPAS module
        [Parameter(Mandatory = $false)]
        [switch]$psPASFormat,

        # Subdomain assigned to Privilege Cloud
        [Parameter(Mandatory = $false)]
        [string]$PCloudSubdomain
    )

    # Define API URLs
    $IdaptiveBasePlatformURL = if ($IdentityTenantURL -match "https://") { $IdentityTenantURL } else { "https://$IdentityTenantURL" }
    $PCloudTenantAPIURL = "https://$PCloudSubdomain.privilegecloud.cyberark.cloud/PasswordVault/"

    # Handle OAuth Authentication
    if ('OAuthCreds' -eq $PSCmdlet.ParameterSetName) {
        $IdentityUserName = $OAuthCreds.UserName
        $identityHeaders = Format-Token(Get-OAuthCreds -OAuthCreds $OAuthCreds)

        # ‚úÖ Print Token to Console
        Write-Host "`nüîê Identity Token Successfully Retrieved:" -ForegroundColor Cyan
        Write-Host "------------------------------------------------"
        Write-Host "Token: $($identityHeaders["Authorization"])" -ForegroundColor Green
        Write-Host "------------------------------------------------`n"

        return $identityHeaders
    }

    # Start authentication request
    $startPlatformAPIBody = @{User = $IdentityUserName; Version = "1.0"} | ConvertTo-Json -Compress
    $startPlatformAPIAuth = "$IdaptiveBasePlatformURL/Security/StartAuthentication"

    # Invoke Authentication
    try {
        $IdaptiveResponse = Invoke-RestMethod -Uri $startPlatformAPIAuth -Method Post -ContentType "application/json" -Body $startPlatformAPIBody -TimeoutSec 30
    } catch {
        Write-Host "‚ùå Error: Failed to start authentication - $($_.Exception.Message)" -ForegroundColor Red
        return
    }

    # Handle SAML-based authentication
    IF (![string]::IsNullOrEmpty($IdaptiveResponse.Result.IdpRedirectUrl)) {
        $AnswerToResponse = Invoke-SAMLLogon $IdaptiveResponse
    } else {
        $AnswerToResponse = Invoke-Challenge $IdaptiveResponse
    }

    # Return Token if authentication is successful
    If ($AnswerToResponse.success) {
        $identityHeaders = Format-Token($AnswerToResponse.Result.Token)

        # ‚úÖ Print Token for Visibility
        Write-Host "`n‚úÖ Identity Token Successfully Retrieved:" -ForegroundColor Cyan
        Write-Host "------------------------------------------------"
        Write-Host "Token: $($identityHeaders["Authorization"])" -ForegroundColor Green
        Write-Host "------------------------------------------------`n"

        return $identityHeaders
    } else {
        Write-Host "‚ùå Error: Unable to retrieve Identity Token" -ForegroundColor Red
    }
}
