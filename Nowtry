param
(
    [Parameter(Mandatory=$true, HelpMessage="Please enter your PVWA address (For example: https://pvwa.mydomain.com/passwordvault)")]
    [Alias("url")]
    [String]$PVWAURL,

    [Parameter(Mandatory=$false, HelpMessage="Enter the Authentication type (Default: CyberArk)")]
    [ValidateSet("cyberark", "ldap", "radius")]
    [String]$AuthType = "cyberark",

    [Parameter(Mandatory=$false, HelpMessage="Enter the RADIUS OTP")]
    [ValidateScript({ $AuthType -eq "radius" })]
    [String]$OTP,

    [Parameter(Mandatory=$false)]
    [Switch]$DisableSSLVerify,

    [Parameter(Mandatory=$false)]
    [Switch]$concurrentSession,

    [Parameter(Mandatory=$false, HelpMessage="Vault Stored Credentials")]
    [PSCredential]$PVWACredentials,

    [Parameter(Mandatory=$false)]
    $logonToken
)

$URL_PVWAAPI = "$PVWAURL/api"
$URL_Authentication = "$URL_PVWAAPI/auth"
$URL_Logon = "$URL_Authentication/$AuthType/Logon"
$URL_Logoff = "$URL_Authentication/Logoff"

$global:g_LogonHeader = ""

# Determine Tenant Type
Write-Host "Determining Tenant Type based on URL..."
$TenantType = "Shared Services"
Write-Host "Tenant Type is: $TenantType"

Function Get-LogonHeader {
    param(
        [Parameter(Mandatory=$true)]
        [PSCredential]$Credentials,
        [Parameter(Mandatory=$false)]
        [bool]$concurrentSession,
        [Parameter(Mandatory=$false)]
        [string]$RadiusOTP
    )

    If ($concurrentSession) {
        $logonBody = @{
            username = $Credentials.username.Replace('\', '')
            password = $Credentials.GetNetworkCredential().password
            concurrentSession = "true"
        } | ConvertTo-Json -Compress
    } else {
        $logonBody = @{
            username = $Credentials.username.Replace('\', '')
            password = $Credentials.GetNetworkCredential().password
        } | ConvertTo-Json -Compress
    }
    
    If (![string]::IsNullOrEmpty($RadiusOTP)) {
        $logonBody.Password += ",$RadiusOTP"
    }

    try {
        $logonToken = Invoke-RestMethod -Uri $URL_Logon -Method POST -Body $logonBody -ContentType "application/json" -TimeoutSec 2700 -ErrorAction Continue
        $logonToken = $logonToken.Trim()
    } catch {
        Throw $(New-Object System.Exception ("Get-LogonHeader: $($_.Exception.Response.StatusDescription)", $_.Exception))
    }

    If ([string]::IsNullOrEmpty($logonToken)) {
        Throw "Get-LogonHeader: Logon Token is Empty - Cannot login"
    }

    $logonHeader = @{ Authorization = $logonToken }
    
    return $logonHeader
}

If (![string]::IsNullOrEmpty($PVWACredentials)) {
    $creds = $PVWACredentials
} else {
    $msg = "Enter your $AuthType User name and Password"
    $creds = $Host.UI.PromptForCredential("Authentication Required", $msg, "", "")
}

$global:g_LogonHeader = Get-LogonHeader -Credentials $creds -concurrentSession $concurrentSession -RadiusOTP $OTP

# Continue with the script after successful login
try {
    Invoke-RestMethod "$PVWAURL/api/DiscoveredAccounts" -Method 'DELETE' -Headers $g_LogonHeader
    "Invoked Delete All Pending accounts successfully"
} catch {
    "Invoke Delete All Pending accounts failed"
} Finally {
    If (![string]::IsNullOrEmpty($logonToken)) {
        Write-Host "LogonToken passed, session NOT logged off"
    } else {
        Write-Host "Logoff Session..."
        Invoke-RestMethod -Uri $URL_Logoff -Method POST -Headers $g_LogonHeader -ContentType "application/json" -TimeoutSec 2700 -ErrorAction Continue
        $global:g_LogonHeader = $null
    }
}
