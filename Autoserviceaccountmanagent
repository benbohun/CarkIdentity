# Connect
Function PAPMAPIConnect {
#Central Credential Provider
$CCPAppName = "PAPMRestAPI"
$CCPSafe = "PAPM-VAULT-API"
$CCPUserName = "papmrestapi_local@cyberark.cloud.3761"
$CCPResult = Get-CCPCredential-WinAuth -appid $CCPAppName -safe $CCPSafe -Username $CCPUserName -URL "https://PAPM-CCP-LTM.magellanhealth.com" -UseDefaultCredentials
$mycred = $CCPResult.ToCredential()
#Create session
$Error.clear()
$Session = $null
New-PASSession -TenantSubdomain "magellanhealth" -Credential $mycred -IdentityUser
$script:Session = Get-PASSession
}

PAPMAPIConnect
$Error.clear()



# Define the email parameters
$emailSmtpServer = "relay.magellanhealth.com"
$emailSmtpServerPort = "587"
$emailSmtpUser = "PAPMSmtp_svc"
$Password = Get-CCPCredential-WinAuth -appid "PAPMRestAPI" -safe "PAPM-DOM-SVC" -Username "PAPMSmtp_svc" -URL "https://PAPM-CCP-LTM.magellanhealth.com" -UseDefaultCredentials
$emailSmtpPass = $Password.Content 
$emailFrom = "noreply-PAPMSupport@magellanhealth.com"
$emailcc = "PAPMEngineering@magellanhealth.com"
$emailbcc = "PAPMEngineering@magellanhealth.com"
$SMTPClient = New-Object System.Net.Mail.SmtpClient( $emailSmtpServer , $emailSmtpServerPort )
$SMTPClient.EnableSsl = $False
$SMTPClient.Credentials = New-Object System.Net.NetworkCredential( $emailSmtpUser , $emailSmtpPass );


# Start script

# Set array
$SVCAccounts = @()

# Get all accounts
$Get = Get-PASAccount -safeName *

# Find those in LOCAL Safes
$SVCinLOCALsafe = $Get | Where-Object {($_.SafeName -match "-LOCAL")}
$SVCinLOCAL = $SVCinLOCALsafe.UserName | Where-Object {$_ -match "_svc"}
$SVCAccounts += $SVCinLOCAL


# Find those in APP platforms
$filter1 = $get | Where-Object {(($_.platformId -match "-APP-") -and (!($_.SafeName -match "-LOCAL")))} 
$filter2 = $filter1 | Where-Object {(($_.platformId -match "-APP-") -and (!($_.platformId -match "-LOCAL")))}
$SVCAccounts += $filter2.UserName


# Find those in SVC platforms
$filter3 = $get | Where-Object {(($_.platformId -match "-SVC-") -and (!($_.SafeName -match "-LOCAL")))} 
$filter4 = $filter3 | Where-Object {(($_.platformId -match "-SVC-") -and (!($_.SafeName -match "IPA")))} 
$filter5 = $filter4 | Where-Object {(($_.platformId -match "-SVC-") -and (!($_.platformId -match "IPA")))}
$SVCAccounts += $filter5.UserName


# Find those in PAPM-DOM safes
$filter6 = $get | Where-Object {($_.SafeName -match "PAPM-DOM")} 
$SVCAccounts += $filter6.UserName


# Find those in PSM safe
$filter7 = $get | Where-Object {(($_.SafeName -eq "PSM") -and ($_.UserName -match "_svc"))} 
$SVCAccounts += $filter7.UserName


# Find those in VaultInternal safe
$filter8 = $get | Where-Object {(($_.SafeName -eq "VaultInternal") -and ($_.UserName -match "_svc"))} 
$SVCAccounts += $filter8.UserName


# Output results Unique
$SVCAccounts | Sort-Object -unique


# Get members of Service Account AD group
$GROUPNAME = "Service Accounts" 
$ADsvc = Get-ADGroupMember $GROUPNAME | Get-ADUser | Where-Object -Property enabled -eq $true

# Set array
$validMBHAD = @()

$DEVManagedArray = @(
"DPSMAdminConnect_svc",
"DPSMConnect_svc",
"PAPMReconDEV2_SVC",
"PAPMReconDEV1_SVC",
"DEVPAPMRESTAPI_svc",
"PAPMDEVLdapBind_svc"
)
# Find only those managed in PROD
$ADfilter1 = $ADsvc | Where-Object {!($_.SamAccountName -match ".\$")}

# Exclude the svc accounts managed in DEV
$ADFilter2 = $ADfilter1 | Where-Object {!($_.SamAccountName -in $DEVManagedArray)}

$validMBHAD += $ADFilter2.SamAccountName


# Compare those valid MBH accounts are in CyberArk
$NotinCyberArk = @()
Foreach ($MBH in $validMBHAD){

    if ($MBH -notin $SVCAccounts) {$NotinCyberArk += $MBH}
    else {continue}
}

# Email PAPMSupport about this finding
If (!($NotinCyberArk.count -eq 0)) {

$emailTo = "PAPMEngineering@magellanhealth.com"
$emailMessage = New-Object System.Net.Mail.MailMessage( $emailFrom , $emailTo )
$emailMessage.Subject = "Alert - Service Accounts require attention" 
$emailMessage.Body = @"


[INFO] 
The following service accounts were found in MBH Active Directory Service Accounts group, but not onboarded in CyberArk.

[ACCOUNT] 

$($NotinCyberArk -join "`r`n")

[ACTION]
Please complete ALL of the following steps: 

1. Identify owner.
2. Initiate an existing account onboarding procedure.
3. Ensure owner initiates rotation from CyberArk within 7 days.

"@

$SMTPClient.Send( $emailMessage )

}
else {continue}


# Compare those service accounts in CyberArk are in the valid MBH accounts
$NotinADgroup = @()
$MBHManagedSVCNotinAD = @()
Foreach ($CA in $SVCAccounts){

    if ($CA -notin $validMBHAD) {$NotinADgroup  += $CA}
    else {continue}
}

Foreach ($NotinAD in $NotinADgroup) {
    $address = $null
    $address = ($Get | Where-Object {$_.UserName -eq $NotinAD}).Address
    if ($Address -ne "mbh.mhs.magellanhealth.com") { continue }
    else { $MBHManagedSVCNotinAD += $NotinAD }
}

# Email PAPMSupport about this finding
If (!($MBHManagedSVCNotinAD.count -eq 0)) {

$emailTo = "PAPMEngineering@magellanhealth.com"
$emailMessage = New-Object System.Net.Mail.MailMessage( $emailFrom , $emailTo )
$emailMessage.Subject = "Alert - Service Accounts require attention" 
$emailMessage.Body = @"


[INFO] 
The following service accounts were found managed in CyberArk, but not in MBH Active Directory Service Accounts group.

[ACCOUNT]

$($MBHManagedSVCNotinAD -join "`r`n")

[ACTION] 
Please complete ALL of the following steps:

1. Add each account to Service Accounts group.
2. Validate each account has the following attributes un-checked:
    a. User cannot change password.
    b. Password never expires (confirm CPM rotation has occured previously before unchecking this).

"@

$SMTPClient.Send( $emailMessage )

}
else {continue}



# Check Service Account Options

# Specify the name of the security group
$GroupName = "Service Accounts"

# Get the members of the group
$groupMembers = Get-ADGroupMember -Identity $GroupName -Recursive | Where-Object { $_.objectClass -eq 'user' }

# Initialize arrays for reporting
$usersWithOptionsEnabled = @()

# Iterate through each member
foreach ($member in $groupMembers) {
    # Get the user account details, including 'Enabled'
    $user = Get-ADUser -Identity $member.SamAccountName -Properties PasswordNeverExpires, CannotChangePassword, Enabled

    # Check if the account is enabled
    if ($user.Enabled) {
        # Check account options
        if ($user.PasswordNeverExpires -or $user.CannotChangePassword) {
            $usersWithOptionsEnabled += [PSCustomObject]@{
                SamAccountName        = $user.SamAccountName
                #Enabled               = $user.Enabled
                PasswordNeverExpires  = $user.PasswordNeverExpires
                CannotChangePassword  = $user.CannotChangePassword
            }
        }
    }
}

# Email PAPMSupport about this finding
if ($usersWithOptionsEnabled.Count -gt 0) {

$emailTo = "PAPMEngineering@magellanhealth.com"
$emailMessage = New-Object System.Net.Mail.MailMessage( $emailFrom , $emailTo )
$emailMessage.Subject = "Alert - Service Accounts require attention" 
$emailMessage.Body = @"


[INFO] 
The following enabled service accounts have PasswordNeverExpires or CannotChangePassword options enabled.

[ACCOUNT]

$($usersWithOptionsEnabled.SamAccountName -join "`r`n")

[ACTION] 
Please complete ALL of the following steps:

1. Validate each account has the following attributes un-checked:
    a. User cannot change password.
    b. Password never expires (confirm CPM rotation has occured previously before unchecking this).

"@

$SMTPClient.Send( $emailMessage )

} else {continue}



# End script
